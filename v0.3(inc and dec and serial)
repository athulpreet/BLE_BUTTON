#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <HX711.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "FS.h"
#include "SPIFFS.h"
#include <ESP.h>



#define OLED_SDA 17
#define OLED_SCL 18

#define BUTTON_PIN 12
#define MENU_BUTTON_PIN 13

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

#define TIMEOUT_DURATION 5000





volatile unsigned long lastMenuButtonDebounceTime = 0; // Initialize debounce time for the menu button
unsigned long belowThresholdStartTime = 0; // Global variable to track when the reading goes below 0.2 kg

volatile bool buttonPressed = false;
volatile bool menuButtonPressed = false;
volatile unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;


int value=50;


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);




void IRAM_ATTR handleButtonPress() {
    unsigned long currentTime = millis();
    if ((currentTime - lastDebounceTime) > debounceDelay) {
        buttonPressed = true;
        belowThresholdStartTime = 0;
        lastDebounceTime = currentTime;
         
    }
}

void IRAM_ATTR handleMenuButtonPress() {
    unsigned long currentTime = millis();
    if ((currentTime - lastMenuButtonDebounceTime) > debounceDelay) {
        menuButtonPressed = true;
        belowThresholdStartTime = 0;
        lastMenuButtonDebounceTime = currentTime;
        
    }
}





void setup() {
  // put your setup code here, to run once:
      Serial.begin(9600);
    Wire.begin(OLED_SDA, OLED_SCL);
  
    pinMode(BUTTON_PIN, INPUT);
    attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), handleButtonPress, RISING);
    pinMode(MENU_BUTTON_PIN, INPUT);
    attachInterrupt(digitalPinToInterrupt(MENU_BUTTON_PIN), handleMenuButtonPress, RISING);


    
 if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }
    displayCenteredText("TINTURE");
    delay(3000);

}

void loop() {
  // put your main code here, to run repeatedly:

if (buttonPressed==1) {

value=value+10;
if(value>140)
{
  value=20;
  }
 displayWeight(value);
  buttonPressed = false; // Reset the flag
  
  }


 if (menuButtonPressed) {

value=value-10;
if(value<20)
{
  value=140;
  }

 displayWeight(value);
   menuButtonPressed = false;
  
  
  }


 Serial.print((char)value);

  

}





void displayCenteredText(String message) {
    display.clearDisplay(); // Clear the display

    // Set text size and color
    display.setTextSize(3); // Increase the text size
    display.setTextColor(SSD1306_WHITE); // Set text color to white

    // Calculate width and height of the text to center it
    int16_t x1, y1;
    uint16_t w, h;
    display.getTextBounds(message, 0, 0, &x1, &y1, &w, &h); // Calculate the width and height of the text
    int x = (SCREEN_WIDTH - w) / 2; // Calculate x position to center the text
    int y = (SCREEN_HEIGHT - h) / 2; // Calculate y position to center the text

    // Set cursor to calculated position
    display.setCursor(x, y);

    // Print the message
    display.println(message);

    // Optionally add some graphics
    //display.drawRoundRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 5, SSD1306_WHITE); // Draw a rounded rectangle around the screen
    // Add more graphics here if desired

    // Update the display with all of the above
    display.display();
}









void displayWeight(int weight) {
  display.clearDisplay();
  display.setTextSize(3);
  int16_t x, y;
  uint16_t w, h;
  String displayText = String(weight);
  display.getTextBounds(displayText, 0, 0, &x, &y, &w, &h);
  int centerX = (SCREEN_WIDTH - w) / 2;
  int centerY = (SCREEN_HEIGHT - h) / 2;
  display.drawRoundRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 5, SSD1306_WHITE);
  display.setCursor(centerX, centerY);
  display.println(displayText);
  display.display();
}
